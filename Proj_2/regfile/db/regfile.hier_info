|register
in[0] => ~NO_FANOUT~
in[1] => ~NO_FANOUT~
in[2] => ~NO_FANOUT~
in[3] => ~NO_FANOUT~
in[4] => ~NO_FANOUT~
in[5] => ~NO_FANOUT~
in[6] => ~NO_FANOUT~
in[7] => ~NO_FANOUT~
in[8] => ~NO_FANOUT~
in[9] => ~NO_FANOUT~
in[10] => ~NO_FANOUT~
in[11] => ~NO_FANOUT~
in[12] => ~NO_FANOUT~
in[13] => ~NO_FANOUT~
in[14] => ~NO_FANOUT~
in[15] => ~NO_FANOUT~
in[16] => ~NO_FANOUT~
in[17] => ~NO_FANOUT~
in[18] => ~NO_FANOUT~
in[19] => ~NO_FANOUT~
in[20] => ~NO_FANOUT~
in[21] => ~NO_FANOUT~
in[22] => ~NO_FANOUT~
in[23] => ~NO_FANOUT~
in[24] => ~NO_FANOUT~
in[25] => ~NO_FANOUT~
in[26] => ~NO_FANOUT~
in[27] => ~NO_FANOUT~
in[28] => ~NO_FANOUT~
in[29] => ~NO_FANOUT~
in[30] => ~NO_FANOUT~
in[31] => ~NO_FANOUT~
enable => enable.IN32
clock => clock.IN32
out[0] <= d_flip_flop:dff_loop[0].dff.Q
out[1] <= d_flip_flop:dff_loop[1].dff.Q
out[2] <= d_flip_flop:dff_loop[2].dff.Q
out[3] <= d_flip_flop:dff_loop[3].dff.Q
out[4] <= d_flip_flop:dff_loop[4].dff.Q
out[5] <= d_flip_flop:dff_loop[5].dff.Q
out[6] <= d_flip_flop:dff_loop[6].dff.Q
out[7] <= d_flip_flop:dff_loop[7].dff.Q
out[8] <= d_flip_flop:dff_loop[8].dff.Q
out[9] <= d_flip_flop:dff_loop[9].dff.Q
out[10] <= d_flip_flop:dff_loop[10].dff.Q
out[11] <= d_flip_flop:dff_loop[11].dff.Q
out[12] <= d_flip_flop:dff_loop[12].dff.Q
out[13] <= d_flip_flop:dff_loop[13].dff.Q
out[14] <= d_flip_flop:dff_loop[14].dff.Q
out[15] <= d_flip_flop:dff_loop[15].dff.Q
out[16] <= d_flip_flop:dff_loop[16].dff.Q
out[17] <= d_flip_flop:dff_loop[17].dff.Q
out[18] <= d_flip_flop:dff_loop[18].dff.Q
out[19] <= d_flip_flop:dff_loop[19].dff.Q
out[20] <= d_flip_flop:dff_loop[20].dff.Q
out[21] <= d_flip_flop:dff_loop[21].dff.Q
out[22] <= d_flip_flop:dff_loop[22].dff.Q
out[23] <= d_flip_flop:dff_loop[23].dff.Q
out[24] <= d_flip_flop:dff_loop[24].dff.Q
out[25] <= d_flip_flop:dff_loop[25].dff.Q
out[26] <= d_flip_flop:dff_loop[26].dff.Q
out[27] <= d_flip_flop:dff_loop[27].dff.Q
out[28] <= d_flip_flop:dff_loop[28].dff.Q
out[29] <= d_flip_flop:dff_loop[29].dff.Q
out[30] <= d_flip_flop:dff_loop[30].dff.Q
out[31] <= d_flip_flop:dff_loop[31].dff.Q
reset => reset.IN32


|register|d_flip_flop:dff_loop[0].dff
clock => clock.IN1
enable => enable.IN2
reset => reset.IN2
D => D.IN1
Q <= d_latch:dl2.Q
Qbar <= d_latch:dl2.Qbar


|register|d_flip_flop:dff_loop[0].dff|d_latch:dl1
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[0].dff|d_latch:dl1|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[0].dff|d_latch:dl2
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[0].dff|d_latch:dl2|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[1].dff
clock => clock.IN1
enable => enable.IN2
reset => reset.IN2
D => D.IN1
Q <= d_latch:dl2.Q
Qbar <= d_latch:dl2.Qbar


|register|d_flip_flop:dff_loop[1].dff|d_latch:dl1
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[1].dff|d_latch:dl1|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[1].dff|d_latch:dl2
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[1].dff|d_latch:dl2|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[2].dff
clock => clock.IN1
enable => enable.IN2
reset => reset.IN2
D => D.IN1
Q <= d_latch:dl2.Q
Qbar <= d_latch:dl2.Qbar


|register|d_flip_flop:dff_loop[2].dff|d_latch:dl1
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[2].dff|d_latch:dl1|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[2].dff|d_latch:dl2
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[2].dff|d_latch:dl2|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[3].dff
clock => clock.IN1
enable => enable.IN2
reset => reset.IN2
D => D.IN1
Q <= d_latch:dl2.Q
Qbar <= d_latch:dl2.Qbar


|register|d_flip_flop:dff_loop[3].dff|d_latch:dl1
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[3].dff|d_latch:dl1|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[3].dff|d_latch:dl2
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[3].dff|d_latch:dl2|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[4].dff
clock => clock.IN1
enable => enable.IN2
reset => reset.IN2
D => D.IN1
Q <= d_latch:dl2.Q
Qbar <= d_latch:dl2.Qbar


|register|d_flip_flop:dff_loop[4].dff|d_latch:dl1
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[4].dff|d_latch:dl1|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[4].dff|d_latch:dl2
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[4].dff|d_latch:dl2|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[5].dff
clock => clock.IN1
enable => enable.IN2
reset => reset.IN2
D => D.IN1
Q <= d_latch:dl2.Q
Qbar <= d_latch:dl2.Qbar


|register|d_flip_flop:dff_loop[5].dff|d_latch:dl1
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[5].dff|d_latch:dl1|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[5].dff|d_latch:dl2
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[5].dff|d_latch:dl2|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[6].dff
clock => clock.IN1
enable => enable.IN2
reset => reset.IN2
D => D.IN1
Q <= d_latch:dl2.Q
Qbar <= d_latch:dl2.Qbar


|register|d_flip_flop:dff_loop[6].dff|d_latch:dl1
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[6].dff|d_latch:dl1|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[6].dff|d_latch:dl2
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[6].dff|d_latch:dl2|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[7].dff
clock => clock.IN1
enable => enable.IN2
reset => reset.IN2
D => D.IN1
Q <= d_latch:dl2.Q
Qbar <= d_latch:dl2.Qbar


|register|d_flip_flop:dff_loop[7].dff|d_latch:dl1
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[7].dff|d_latch:dl1|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[7].dff|d_latch:dl2
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[7].dff|d_latch:dl2|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[8].dff
clock => clock.IN1
enable => enable.IN2
reset => reset.IN2
D => D.IN1
Q <= d_latch:dl2.Q
Qbar <= d_latch:dl2.Qbar


|register|d_flip_flop:dff_loop[8].dff|d_latch:dl1
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[8].dff|d_latch:dl1|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[8].dff|d_latch:dl2
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[8].dff|d_latch:dl2|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[9].dff
clock => clock.IN1
enable => enable.IN2
reset => reset.IN2
D => D.IN1
Q <= d_latch:dl2.Q
Qbar <= d_latch:dl2.Qbar


|register|d_flip_flop:dff_loop[9].dff|d_latch:dl1
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[9].dff|d_latch:dl1|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[9].dff|d_latch:dl2
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[9].dff|d_latch:dl2|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[10].dff
clock => clock.IN1
enable => enable.IN2
reset => reset.IN2
D => D.IN1
Q <= d_latch:dl2.Q
Qbar <= d_latch:dl2.Qbar


|register|d_flip_flop:dff_loop[10].dff|d_latch:dl1
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[10].dff|d_latch:dl1|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[10].dff|d_latch:dl2
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[10].dff|d_latch:dl2|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[11].dff
clock => clock.IN1
enable => enable.IN2
reset => reset.IN2
D => D.IN1
Q <= d_latch:dl2.Q
Qbar <= d_latch:dl2.Qbar


|register|d_flip_flop:dff_loop[11].dff|d_latch:dl1
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[11].dff|d_latch:dl1|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[11].dff|d_latch:dl2
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[11].dff|d_latch:dl2|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[12].dff
clock => clock.IN1
enable => enable.IN2
reset => reset.IN2
D => D.IN1
Q <= d_latch:dl2.Q
Qbar <= d_latch:dl2.Qbar


|register|d_flip_flop:dff_loop[12].dff|d_latch:dl1
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[12].dff|d_latch:dl1|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[12].dff|d_latch:dl2
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[12].dff|d_latch:dl2|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[13].dff
clock => clock.IN1
enable => enable.IN2
reset => reset.IN2
D => D.IN1
Q <= d_latch:dl2.Q
Qbar <= d_latch:dl2.Qbar


|register|d_flip_flop:dff_loop[13].dff|d_latch:dl1
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[13].dff|d_latch:dl1|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[13].dff|d_latch:dl2
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[13].dff|d_latch:dl2|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[14].dff
clock => clock.IN1
enable => enable.IN2
reset => reset.IN2
D => D.IN1
Q <= d_latch:dl2.Q
Qbar <= d_latch:dl2.Qbar


|register|d_flip_flop:dff_loop[14].dff|d_latch:dl1
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[14].dff|d_latch:dl1|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[14].dff|d_latch:dl2
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[14].dff|d_latch:dl2|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[15].dff
clock => clock.IN1
enable => enable.IN2
reset => reset.IN2
D => D.IN1
Q <= d_latch:dl2.Q
Qbar <= d_latch:dl2.Qbar


|register|d_flip_flop:dff_loop[15].dff|d_latch:dl1
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[15].dff|d_latch:dl1|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[15].dff|d_latch:dl2
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[15].dff|d_latch:dl2|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[16].dff
clock => clock.IN1
enable => enable.IN2
reset => reset.IN2
D => D.IN1
Q <= d_latch:dl2.Q
Qbar <= d_latch:dl2.Qbar


|register|d_flip_flop:dff_loop[16].dff|d_latch:dl1
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[16].dff|d_latch:dl1|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[16].dff|d_latch:dl2
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[16].dff|d_latch:dl2|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[17].dff
clock => clock.IN1
enable => enable.IN2
reset => reset.IN2
D => D.IN1
Q <= d_latch:dl2.Q
Qbar <= d_latch:dl2.Qbar


|register|d_flip_flop:dff_loop[17].dff|d_latch:dl1
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[17].dff|d_latch:dl1|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[17].dff|d_latch:dl2
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[17].dff|d_latch:dl2|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[18].dff
clock => clock.IN1
enable => enable.IN2
reset => reset.IN2
D => D.IN1
Q <= d_latch:dl2.Q
Qbar <= d_latch:dl2.Qbar


|register|d_flip_flop:dff_loop[18].dff|d_latch:dl1
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[18].dff|d_latch:dl1|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[18].dff|d_latch:dl2
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[18].dff|d_latch:dl2|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[19].dff
clock => clock.IN1
enable => enable.IN2
reset => reset.IN2
D => D.IN1
Q <= d_latch:dl2.Q
Qbar <= d_latch:dl2.Qbar


|register|d_flip_flop:dff_loop[19].dff|d_latch:dl1
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[19].dff|d_latch:dl1|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[19].dff|d_latch:dl2
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[19].dff|d_latch:dl2|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[20].dff
clock => clock.IN1
enable => enable.IN2
reset => reset.IN2
D => D.IN1
Q <= d_latch:dl2.Q
Qbar <= d_latch:dl2.Qbar


|register|d_flip_flop:dff_loop[20].dff|d_latch:dl1
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[20].dff|d_latch:dl1|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[20].dff|d_latch:dl2
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[20].dff|d_latch:dl2|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[21].dff
clock => clock.IN1
enable => enable.IN2
reset => reset.IN2
D => D.IN1
Q <= d_latch:dl2.Q
Qbar <= d_latch:dl2.Qbar


|register|d_flip_flop:dff_loop[21].dff|d_latch:dl1
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[21].dff|d_latch:dl1|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[21].dff|d_latch:dl2
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[21].dff|d_latch:dl2|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[22].dff
clock => clock.IN1
enable => enable.IN2
reset => reset.IN2
D => D.IN1
Q <= d_latch:dl2.Q
Qbar <= d_latch:dl2.Qbar


|register|d_flip_flop:dff_loop[22].dff|d_latch:dl1
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[22].dff|d_latch:dl1|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[22].dff|d_latch:dl2
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[22].dff|d_latch:dl2|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[23].dff
clock => clock.IN1
enable => enable.IN2
reset => reset.IN2
D => D.IN1
Q <= d_latch:dl2.Q
Qbar <= d_latch:dl2.Qbar


|register|d_flip_flop:dff_loop[23].dff|d_latch:dl1
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[23].dff|d_latch:dl1|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[23].dff|d_latch:dl2
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[23].dff|d_latch:dl2|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[24].dff
clock => clock.IN1
enable => enable.IN2
reset => reset.IN2
D => D.IN1
Q <= d_latch:dl2.Q
Qbar <= d_latch:dl2.Qbar


|register|d_flip_flop:dff_loop[24].dff|d_latch:dl1
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[24].dff|d_latch:dl1|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[24].dff|d_latch:dl2
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[24].dff|d_latch:dl2|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[25].dff
clock => clock.IN1
enable => enable.IN2
reset => reset.IN2
D => D.IN1
Q <= d_latch:dl2.Q
Qbar <= d_latch:dl2.Qbar


|register|d_flip_flop:dff_loop[25].dff|d_latch:dl1
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[25].dff|d_latch:dl1|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[25].dff|d_latch:dl2
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[25].dff|d_latch:dl2|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[26].dff
clock => clock.IN1
enable => enable.IN2
reset => reset.IN2
D => D.IN1
Q <= d_latch:dl2.Q
Qbar <= d_latch:dl2.Qbar


|register|d_flip_flop:dff_loop[26].dff|d_latch:dl1
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[26].dff|d_latch:dl1|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[26].dff|d_latch:dl2
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[26].dff|d_latch:dl2|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[27].dff
clock => clock.IN1
enable => enable.IN2
reset => reset.IN2
D => D.IN1
Q <= d_latch:dl2.Q
Qbar <= d_latch:dl2.Qbar


|register|d_flip_flop:dff_loop[27].dff|d_latch:dl1
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[27].dff|d_latch:dl1|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[27].dff|d_latch:dl2
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[27].dff|d_latch:dl2|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[28].dff
clock => clock.IN1
enable => enable.IN2
reset => reset.IN2
D => D.IN1
Q <= d_latch:dl2.Q
Qbar <= d_latch:dl2.Qbar


|register|d_flip_flop:dff_loop[28].dff|d_latch:dl1
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[28].dff|d_latch:dl1|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[28].dff|d_latch:dl2
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[28].dff|d_latch:dl2|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[29].dff
clock => clock.IN1
enable => enable.IN2
reset => reset.IN2
D => D.IN1
Q <= d_latch:dl2.Q
Qbar <= d_latch:dl2.Qbar


|register|d_flip_flop:dff_loop[29].dff|d_latch:dl1
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[29].dff|d_latch:dl1|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[29].dff|d_latch:dl2
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[29].dff|d_latch:dl2|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[30].dff
clock => clock.IN1
enable => enable.IN2
reset => reset.IN2
D => D.IN1
Q <= d_latch:dl2.Q
Qbar <= d_latch:dl2.Qbar


|register|d_flip_flop:dff_loop[30].dff|d_latch:dl1
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[30].dff|d_latch:dl1|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[30].dff|d_latch:dl2
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[30].dff|d_latch:dl2|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[31].dff
clock => clock.IN1
enable => enable.IN2
reset => reset.IN2
D => D.IN1
Q <= d_latch:dl2.Q
Qbar <= d_latch:dl2.Qbar


|register|d_flip_flop:dff_loop[31].dff|d_latch:dl1
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[31].dff|d_latch:dl1|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[31].dff|d_latch:dl2
data => ag2.IN1
data => ag1.IN1
enable => ag0.IN0
clock => ag0.IN1
reset => reset.IN1
Q <= mux_2:mx.port3
Qbar <= ng3.DB_MAX_OUTPUT_PORT_TYPE


|register|d_flip_flop:dff_loop[31].dff|d_latch:dl2|mux_2:mx
select => out.OUTPUTSELECT
in0 => out.DATAA
in1 => out.DATAB
out <= out.DB_MAX_OUTPUT_PORT_TYPE


