// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/27/2021 01:59:08"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          processor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module processor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [31:0] keyboard_in;
reg reset;
// wires                                               
wire keyboard_ack;
wire [31:0] lcd_data;
wire lcd_write;
wire [14:0] rowData1;
wire [14:0] rowData2;
wire [14:0] rowData3;
wire [14:0] rowData4;
wire [14:0] rowData5;
wire [14:0] rowData6;
wire [14:0] rowData7;
wire [14:0] rowData8;
wire [14:0] rowData9;
wire [14:0] rowData10;
wire [14:0] rowData11;
wire [14:0] rowData12;
wire [14:0] rowData13;
wire [14:0] rowData14;
wire [14:0] rowData15;
wire [14:0] rowData16;
wire [14:0] rowData17;
wire [14:0] rowData18;
wire [14:0] rowData19;
wire [14:0] rowData20;

// assign statements (if any)                          
processor i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.keyboard_ack(keyboard_ack),
	.keyboard_in(keyboard_in),
	.lcd_data(lcd_data),
	.lcd_write(lcd_write),
	.reset(reset),
	.rowData1(rowData1),
	.rowData2(rowData2),
	.rowData3(rowData3),
	.rowData4(rowData4),
	.rowData5(rowData5),
	.rowData6(rowData6),
	.rowData7(rowData7),
	.rowData8(rowData8),
	.rowData9(rowData9),
	.rowData10(rowData10),
	.rowData11(rowData11),
	.rowData12(rowData12),
	.rowData13(rowData13),
	.rowData14(rowData14),
	.rowData15(rowData15),
	.rowData16(rowData16),
	.rowData17(rowData17),
	.rowData18(rowData18),
	.rowData19(rowData19),
	.rowData20(rowData20)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 
// keyboard_in[ 31 ]
initial
begin
	keyboard_in[31] = 1'b0;
end 
// keyboard_in[ 30 ]
initial
begin
	keyboard_in[30] = 1'b0;
end 
// keyboard_in[ 29 ]
initial
begin
	keyboard_in[29] = 1'b0;
end 
// keyboard_in[ 28 ]
initial
begin
	keyboard_in[28] = 1'b0;
end 
// keyboard_in[ 27 ]
initial
begin
	keyboard_in[27] = 1'b0;
end 
// keyboard_in[ 26 ]
initial
begin
	keyboard_in[26] = 1'b0;
end 
// keyboard_in[ 25 ]
initial
begin
	keyboard_in[25] = 1'b0;
end 
// keyboard_in[ 24 ]
initial
begin
	keyboard_in[24] = 1'b0;
end 
// keyboard_in[ 23 ]
initial
begin
	keyboard_in[23] = 1'b0;
end 
// keyboard_in[ 22 ]
initial
begin
	keyboard_in[22] = 1'b0;
end 
// keyboard_in[ 21 ]
initial
begin
	keyboard_in[21] = 1'b0;
end 
// keyboard_in[ 20 ]
initial
begin
	keyboard_in[20] = 1'b0;
end 
// keyboard_in[ 19 ]
initial
begin
	keyboard_in[19] = 1'b0;
end 
// keyboard_in[ 18 ]
initial
begin
	keyboard_in[18] = 1'b0;
end 
// keyboard_in[ 17 ]
initial
begin
	keyboard_in[17] = 1'b0;
end 
// keyboard_in[ 16 ]
initial
begin
	keyboard_in[16] = 1'b0;
end 
// keyboard_in[ 15 ]
initial
begin
	keyboard_in[15] = 1'b0;
end 
// keyboard_in[ 14 ]
initial
begin
	keyboard_in[14] = 1'b0;
end 
// keyboard_in[ 13 ]
initial
begin
	keyboard_in[13] = 1'b0;
end 
// keyboard_in[ 12 ]
initial
begin
	keyboard_in[12] = 1'b0;
end 
// keyboard_in[ 11 ]
initial
begin
	keyboard_in[11] = 1'b0;
end 
// keyboard_in[ 10 ]
initial
begin
	keyboard_in[10] = 1'b0;
end 
// keyboard_in[ 9 ]
initial
begin
	keyboard_in[9] = 1'b0;
end 
// keyboard_in[ 8 ]
initial
begin
	keyboard_in[8] = 1'b0;
end 
// keyboard_in[ 7 ]
initial
begin
	keyboard_in[7] = 1'b0;
end 
// keyboard_in[ 6 ]
initial
begin
	keyboard_in[6] = 1'b0;
end 
// keyboard_in[ 5 ]
initial
begin
	keyboard_in[5] = 1'b0;
end 
// keyboard_in[ 4 ]
initial
begin
	keyboard_in[4] = 1'b0;
end 
// keyboard_in[ 3 ]
initial
begin
	keyboard_in[3] = 1'b0;
end 
// keyboard_in[ 2 ]
initial
begin
	keyboard_in[2] = 1'b0;
end 
// keyboard_in[ 1 ]
initial
begin
	keyboard_in[1] = 1'b0;
end 
// keyboard_in[ 0 ]
initial
begin
	keyboard_in[0] = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 
endmodule

